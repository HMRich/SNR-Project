package test.enums.typeeffectiveness;

import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Tags;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import application.anatures.Anature;
import application.enums.Type;
import application.enums.TypeEffectiveness;
import test.helpers.TestObjects;
import test.helpers.TestTags;

@DisplayName("Explicit Type Combination Tests")
@Tags({ @Tag(TestTags.UnitTest), @Tag(TestTags.Explicit) })
public class ExplicitTypeCombinationTests
{
	@DisplayName("with \"Normal\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getNormalCombos")
	void NormalType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Fire\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getFireCombos")
	void FireType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with all \"Water\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getWaterCombos")
	void WaterType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Electric\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getElectricCombos")
	void ElectricType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Grass\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getGrassCombos")
	void GrassType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Ice\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getIceCombos")
	void IceType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Fighting\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getFightingCombos")
	void FightingType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Poison\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getPoisonCombos")
	void PoisonType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Ground\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getGroundCombos")
	void GroundType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Flying\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getFlyingCombos")
	void FlyingType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Psychic\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getPsychicCombos")
	void PsychicType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Bug\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getBugCombos")
	void BugType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Rock\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getRockCombos")
	void RockType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Ghost\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getGhostCombos")
	void GhostType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Dragon\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getDragonCombos")
	void DragonType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Dark\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getDarkCombos")
	void DarkType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Steel\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getSteelCombos")
	void SteelType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}

	@DisplayName("with \"Fairy\" type against all combinations")
	@ParameterizedTest(name = "\"{0}\" vs \"{1}\"    returns effectiveness value -> \"{2}\"")
	@MethodSource("test.enums.typeeffectiveness.ExplicitTypeEffectivenessTestProvider#getFairyCombos")
	void FairyType_AgainstAllCombinations_ReturnsCorrectValue(Anature source, Anature target, TypeEffectiveness expectedResult)
	{
		assertTrue(TypeEffectiveness.typeEffectiveness(source, target).equals(expectedResult),
				"returned \"" + TypeEffectiveness.typeEffectiveness(source, target).toString() + "\" instead.");
	}
}

class ExplicitTypeEffectivenessTestProvider
{
	private static Anature setAnatureTypes(Type[] types)
	{
		return TestObjects.getAnature().getClone().setPrimaryType(types[0]).setSecondaryType(types[1]);
	}

	private static Anature setAnatureTypes(Type type)
	{
		return TestObjects.getAnature().getClone().setPrimaryType(type);
	}

	static Anature s(Type sourceType)
	{
		return setAnatureTypes(sourceType);
	}

	static Anature t(Type[] targetTypes)
	{
		return setAnatureTypes(targetTypes);
	}

	static Object[] getNormalCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Normal), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getFireCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fire), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getWaterCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Water), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Water), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getElectricCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Electric), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getGrassCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Grass), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getIceCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ice), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getFightingCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fighting), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.NotEffective } };
	}

	static Object[] getPoisonCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Poison), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.SuperEffective } };
	}

	static Object[] getGroundCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ground), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getFlyingCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Flying), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getPsychicCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Psychic), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getBugCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Bug), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.NotEffective } };
	}

	static Object[] getRockCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Rock), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getGhostCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Ghost), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}

	static Object[] getDragonCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NoEffect },
				new Object[] { s(Type.Dragon), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.NoEffect } };
	}

	static Object[] getDarkCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Dark), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.NotEffective } };
	}

	static Object[] getSteelCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Steel), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.SuperEffective } };
	}

	static Object[] getFairyCombos()
	{
		return new Object[] { //
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Fire }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Water }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Normal, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Water }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Electric }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Grass }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Ice }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Fighting }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Poison }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fire, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Electric }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Water, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Grass }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Electric, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Ice }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Grass, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Fighting }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Poison }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Ground }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ice, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Poison }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Ground }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Flying }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Psychic }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Bug }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Rock }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Ghost }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Dragon }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Dark }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fighting, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Ground }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Flying }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Psychic }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Bug }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Rock }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Ghost }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Dragon }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Dark }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Steel }), TypeEffectiveness.SeriouslyNotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Poison, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Flying }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ground, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Psychic }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Flying, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.Bug }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Psychic, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Bug, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Bug, Type.Rock }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Bug, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Bug, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Bug, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Bug, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Bug, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Rock, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Rock, Type.Ghost }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Rock, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Rock, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Rock, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Rock, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ghost, Type.NotSet }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ghost, Type.Dragon }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ghost, Type.Dark }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ghost, Type.Steel }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Ghost, Type.Fairy }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Dragon, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Dragon, Type.Dark }), TypeEffectiveness.ExtremelyEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Dragon, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Dragon, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Dark, Type.NotSet }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Dark, Type.Steel }), TypeEffectiveness.Normal },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Dark, Type.Fairy }), TypeEffectiveness.SuperEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Steel, Type.NotSet }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Steel, Type.Fairy }), TypeEffectiveness.NotEffective },
				new Object[] { s(Type.Fairy), t(new Type[] { Type.Fairy, Type.NotSet }), TypeEffectiveness.Normal } };
	}
}