package test;

import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

import org.junit.Assert;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.TestTemplate;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.extension.Extension;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.api.extension.ParameterResolver;
import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;

import application.anatures.Anature;
import application.enums.Type;
import application.enums.TypeEffectiveness;

@DisplayName("Type Advantage Tests")
class TypeAdvantageTests
{
	private Anature baseAnature;

	private Anature setAnatureTypes(Type[] types)
	{
		return baseAnature.getClone()
				.setPrimaryType(types[0])
				.setSecondaryType(types[1]);
	}

	@TestTemplate
	@ExtendWith(AdvantageValueTestTempalte.class)
	void testEquals(TypeEffectivenessTestCase testCase)
	{
		Assert.assertEquals(TypeEffectiveness.typeEffectiveness(testCase.attacker, testCase.defender), testCase.expectedEffectiveness);
	}

	public class AdvantageValueTestTempalte implements TestTemplateInvocationContextProvider
	{
		private TypeEffectivenessTestCase createTestCase(Type[] sourceTypes, Type[] targetTypes, TypeEffectiveness expectedResult)
		{
			Anature sourceAnature = setAnatureTypes(sourceTypes);
			Anature targetAnature = setAnatureTypes(targetTypes);
			return new TypeEffectivenessTestCase(sourceAnature, targetAnature, expectedResult);
		}

		@Override
		public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext arg0)
		{
			return Stream.of(addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Rock }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Normal }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Fire }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Water }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Grass }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Rock }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Ice }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Bug }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Steel }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fire }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Normal }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Flying }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Poison }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Rock }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Ice }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Bug }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Dark }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Steel }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fighting }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Fire }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Water }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Grass }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Ground }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Rock }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Steel }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Water }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Grass }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Electric }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Rock }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Bug }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Flying }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Fire }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Water }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Flying }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Grass }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Poison }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Ground }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Rock }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Bug }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Grass }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Grass }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Poison }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Ground }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Rock }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Poison }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Water }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Flying }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Grass }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Electric }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Ground }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Steel }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Fire }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Flying }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Grass }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Poison }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Electric }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Rock }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Bug }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Steel }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ground }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Poison }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Dark }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Psychic }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Fire }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Flying }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Ground }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Ice }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Bug }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Rock }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Fire }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Water }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Flying }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Grass }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Ground }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Ice }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Ice }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Fire }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Flying }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Grass }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Poison }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Dark }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Bug }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Dragon }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Normal }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Dark }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Steel }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Ghost }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Dark }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Steel }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Dark }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Fire }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Water }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Poison }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Electric }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Rock }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Ice }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Dark }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Steel }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Normal }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Fire }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Fighting }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Water }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Flying }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Grass }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Poison }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Electric }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Ground }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Psychic }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Rock }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Ice }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Bug }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Dragon }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Ghost }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Dark }, TypeEffectiveness.SuperEffective)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Steel }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
			{ Type.Fairy }, new Type[]
			{ Type.Fairy }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Water, Type.Ground }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Ice, Type.Ground }, TypeEffectiveness.NoEffect)), addCase(createTestCase(new Type[]
			{ Type.Electric }, new Type[]
			{ Type.Electric, Type.Ground }, TypeEffectiveness.NoEffect)),

					addCase(createTestCase(new Type[]
					{ Type.Electric }, new Type[]
					{ Type.Water, Type.Grass }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
					{ Type.Electric }, new Type[]
					{ Type.Ice, Type.Grass }, TypeEffectiveness.NotEffective)), addCase(createTestCase(new Type[]
					{ Type.Electric }, new Type[]
					{ Type.Electric, Type.Grass }, TypeEffectiveness.NotEffective)),

					addCase(createTestCase(new Type[]
					{ Type.Electric }, new Type[]
					{ Type.Water, Type.Fire }, TypeEffectiveness.Normal)), addCase(createTestCase(new Type[]
					{ Type.Electric }, new Type[]
					{ Type.Normal, Type.Fire }, TypeEffectiveness.Normal)),

					addCase(createTestCase(new Type[]
					{ Type.Electric }, new Type[]
					{ Type.Water, Type.Flying }, TypeEffectiveness.SuperEffective)));
		}

		@Override
		public boolean supportsTestTemplate(ExtensionContext arg0)
		{
			return true;
		}

		private TestTemplateInvocationContext addCase(TypeEffectivenessTestCase testCase)
		{
			return new TestTemplateInvocationContext()
			{
				@Override
				public String getDisplayName(int invocationIndex)
				{
					return testCase.testCaseToString();
				}

				@Override
				public List<Extension> getAdditionalExtensions()
				{
					return Collections.singletonList(new ParameterResolver()
					{
						@Override
						public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
						{
							return parameterContext.getParameter()
									.getType()
									.equals(TypeEffectivenessTestCase.class);
						}

						@Override
						public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
						{
							return testCase;
						}
					});
				}
			};
		}

	}
}
